// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.3
// source: dfuse/headinfo/v1/headinfo.proto

package pbheadinfo

import (
	context "context"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type HeadInfoRequest_Source int32

const (
	HeadInfoRequest_STREAM  HeadInfoRequest_Source = 0
	HeadInfoRequest_NETWORK HeadInfoRequest_Source = 1
	HeadInfoRequest_KVDB    HeadInfoRequest_Source = 2
)

// Enum value maps for HeadInfoRequest_Source.
var (
	HeadInfoRequest_Source_name = map[int32]string{
		0: "STREAM",
		1: "NETWORK",
		2: "KVDB",
	}
	HeadInfoRequest_Source_value = map[string]int32{
		"STREAM":  0,
		"NETWORK": 1,
		"KVDB":    2,
	}
)

func (x HeadInfoRequest_Source) Enum() *HeadInfoRequest_Source {
	p := new(HeadInfoRequest_Source)
	*p = x
	return p
}

func (x HeadInfoRequest_Source) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HeadInfoRequest_Source) Descriptor() protoreflect.EnumDescriptor {
	return file_dfuse_headinfo_v1_headinfo_proto_enumTypes[0].Descriptor()
}

func (HeadInfoRequest_Source) Type() protoreflect.EnumType {
	return &file_dfuse_headinfo_v1_headinfo_proto_enumTypes[0]
}

func (x HeadInfoRequest_Source) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HeadInfoRequest_Source.Descriptor instead.
func (HeadInfoRequest_Source) EnumDescriptor() ([]byte, []int) {
	return file_dfuse_headinfo_v1_headinfo_proto_rawDescGZIP(), []int{0, 0}
}

type HeadInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source HeadInfoRequest_Source `protobuf:"varint,1,opt,name=source,proto3,enum=dfuse.headinfo.v1.HeadInfoRequest_Source" json:"source,omitempty"`
}

func (x *HeadInfoRequest) Reset() {
	*x = HeadInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dfuse_headinfo_v1_headinfo_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeadInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeadInfoRequest) ProtoMessage() {}

func (x *HeadInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dfuse_headinfo_v1_headinfo_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeadInfoRequest.ProtoReflect.Descriptor instead.
func (*HeadInfoRequest) Descriptor() ([]byte, []int) {
	return file_dfuse_headinfo_v1_headinfo_proto_rawDescGZIP(), []int{0}
}

func (x *HeadInfoRequest) GetSource() HeadInfoRequest_Source {
	if x != nil {
		return x.Source
	}
	return HeadInfoRequest_STREAM
}

type HeadInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LibNum   uint64               `protobuf:"varint,1,opt,name=libNum,proto3" json:"libNum,omitempty"`
	LibID    string               `protobuf:"bytes,2,opt,name=libID,proto3" json:"libID,omitempty"`
	HeadNum  uint64               `protobuf:"varint,10,opt,name=headNum,proto3" json:"headNum,omitempty"`
	HeadID   string               `protobuf:"bytes,11,opt,name=headID,proto3" json:"headID,omitempty"`
	HeadTime *timestamp.Timestamp `protobuf:"bytes,12,opt,name=headTime,proto3" json:"headTime,omitempty"`
}

func (x *HeadInfoResponse) Reset() {
	*x = HeadInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dfuse_headinfo_v1_headinfo_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeadInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeadInfoResponse) ProtoMessage() {}

func (x *HeadInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dfuse_headinfo_v1_headinfo_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeadInfoResponse.ProtoReflect.Descriptor instead.
func (*HeadInfoResponse) Descriptor() ([]byte, []int) {
	return file_dfuse_headinfo_v1_headinfo_proto_rawDescGZIP(), []int{1}
}

func (x *HeadInfoResponse) GetLibNum() uint64 {
	if x != nil {
		return x.LibNum
	}
	return 0
}

func (x *HeadInfoResponse) GetLibID() string {
	if x != nil {
		return x.LibID
	}
	return ""
}

func (x *HeadInfoResponse) GetHeadNum() uint64 {
	if x != nil {
		return x.HeadNum
	}
	return 0
}

func (x *HeadInfoResponse) GetHeadID() string {
	if x != nil {
		return x.HeadID
	}
	return ""
}

func (x *HeadInfoResponse) GetHeadTime() *timestamp.Timestamp {
	if x != nil {
		return x.HeadTime
	}
	return nil
}

var File_dfuse_headinfo_v1_headinfo_proto protoreflect.FileDescriptor

var file_dfuse_headinfo_v1_headinfo_proto_rawDesc = []byte{
	0x0a, 0x20, 0x64, 0x66, 0x75, 0x73, 0x65, 0x2f, 0x68, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x66, 0x6f,
	0x2f, 0x76, 0x31, 0x2f, 0x68, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x11, 0x64, 0x66, 0x75, 0x73, 0x65, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x69, 0x6e,
	0x66, 0x6f, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x81, 0x01, 0x0a, 0x0f, 0x48, 0x65, 0x61, 0x64, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x64, 0x66, 0x75,
	0x73, 0x65, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x48,
	0x65, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x2b, 0x0a,
	0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x52, 0x45, 0x41,
	0x4d, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x10, 0x01,
	0x12, 0x08, 0x0a, 0x04, 0x4b, 0x56, 0x44, 0x42, 0x10, 0x02, 0x22, 0xb6, 0x01, 0x0a, 0x10, 0x48,
	0x65, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x6c, 0x69, 0x62, 0x4e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x6c, 0x69, 0x62, 0x4e, 0x75, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x62, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x69, 0x62, 0x49, 0x44, 0x12, 0x18, 0x0a,
	0x07, 0x68, 0x65, 0x61, 0x64, 0x4e, 0x75, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x68, 0x65, 0x61, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x49,
	0x44, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x49, 0x44, 0x12,
	0x36, 0x0a, 0x08, 0x68, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x68,
	0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x0a, 0x4a, 0x04, 0x08,
	0x0d, 0x10, 0x14, 0x32, 0x62, 0x0a, 0x08, 0x48, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x56, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x48, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22,
	0x2e, 0x64, 0x66, 0x75, 0x73, 0x65, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x66, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x23, 0x2e, 0x64, 0x66, 0x75, 0x73, 0x65, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x69,
	0x6e, 0x66, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x70, 0x0a, 0x11, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x69, 0x6e, 0x67, 0x48, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x5b, 0x0a, 0x0e,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x48, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22,
	0x2e, 0x64, 0x66, 0x75, 0x73, 0x65, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x66, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x23, 0x2e, 0x64, 0x66, 0x75, 0x73, 0x65, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x69,
	0x6e, 0x66, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x42, 0x3c, 0x5a, 0x3a, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e,
	0x67, 0x66, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x62, 0x67, 0x6f, 0x2f, 0x64, 0x66, 0x75, 0x73, 0x65,
	0x2f, 0x68, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x66, 0x6f, 0x2f, 0x76, 0x31, 0x3b, 0x70, 0x62, 0x68,
	0x65, 0x61, 0x64, 0x69, 0x6e, 0x66, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dfuse_headinfo_v1_headinfo_proto_rawDescOnce sync.Once
	file_dfuse_headinfo_v1_headinfo_proto_rawDescData = file_dfuse_headinfo_v1_headinfo_proto_rawDesc
)

func file_dfuse_headinfo_v1_headinfo_proto_rawDescGZIP() []byte {
	file_dfuse_headinfo_v1_headinfo_proto_rawDescOnce.Do(func() {
		file_dfuse_headinfo_v1_headinfo_proto_rawDescData = protoimpl.X.CompressGZIP(file_dfuse_headinfo_v1_headinfo_proto_rawDescData)
	})
	return file_dfuse_headinfo_v1_headinfo_proto_rawDescData
}

var file_dfuse_headinfo_v1_headinfo_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_dfuse_headinfo_v1_headinfo_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_dfuse_headinfo_v1_headinfo_proto_goTypes = []interface{}{
	(HeadInfoRequest_Source)(0), // 0: dfuse.headinfo.v1.HeadInfoRequest.Source
	(*HeadInfoRequest)(nil),     // 1: dfuse.headinfo.v1.HeadInfoRequest
	(*HeadInfoResponse)(nil),    // 2: dfuse.headinfo.v1.HeadInfoResponse
	(*timestamp.Timestamp)(nil), // 3: google.protobuf.Timestamp
}
var file_dfuse_headinfo_v1_headinfo_proto_depIdxs = []int32{
	0, // 0: dfuse.headinfo.v1.HeadInfoRequest.source:type_name -> dfuse.headinfo.v1.HeadInfoRequest.Source
	3, // 1: dfuse.headinfo.v1.HeadInfoResponse.headTime:type_name -> google.protobuf.Timestamp
	1, // 2: dfuse.headinfo.v1.HeadInfo.GetHeadInfo:input_type -> dfuse.headinfo.v1.HeadInfoRequest
	1, // 3: dfuse.headinfo.v1.StreamingHeadInfo.StreamHeadInfo:input_type -> dfuse.headinfo.v1.HeadInfoRequest
	2, // 4: dfuse.headinfo.v1.HeadInfo.GetHeadInfo:output_type -> dfuse.headinfo.v1.HeadInfoResponse
	2, // 5: dfuse.headinfo.v1.StreamingHeadInfo.StreamHeadInfo:output_type -> dfuse.headinfo.v1.HeadInfoResponse
	4, // [4:6] is the sub-list for method output_type
	2, // [2:4] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_dfuse_headinfo_v1_headinfo_proto_init() }
func file_dfuse_headinfo_v1_headinfo_proto_init() {
	if File_dfuse_headinfo_v1_headinfo_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_dfuse_headinfo_v1_headinfo_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeadInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dfuse_headinfo_v1_headinfo_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeadInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dfuse_headinfo_v1_headinfo_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_dfuse_headinfo_v1_headinfo_proto_goTypes,
		DependencyIndexes: file_dfuse_headinfo_v1_headinfo_proto_depIdxs,
		EnumInfos:         file_dfuse_headinfo_v1_headinfo_proto_enumTypes,
		MessageInfos:      file_dfuse_headinfo_v1_headinfo_proto_msgTypes,
	}.Build()
	File_dfuse_headinfo_v1_headinfo_proto = out.File
	file_dfuse_headinfo_v1_headinfo_proto_rawDesc = nil
	file_dfuse_headinfo_v1_headinfo_proto_goTypes = nil
	file_dfuse_headinfo_v1_headinfo_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// HeadInfoClient is the client API for HeadInfo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HeadInfoClient interface {
	GetHeadInfo(ctx context.Context, in *HeadInfoRequest, opts ...grpc.CallOption) (*HeadInfoResponse, error)
}

type headInfoClient struct {
	cc grpc.ClientConnInterface
}

func NewHeadInfoClient(cc grpc.ClientConnInterface) HeadInfoClient {
	return &headInfoClient{cc}
}

func (c *headInfoClient) GetHeadInfo(ctx context.Context, in *HeadInfoRequest, opts ...grpc.CallOption) (*HeadInfoResponse, error) {
	out := new(HeadInfoResponse)
	err := c.cc.Invoke(ctx, "/dfuse.headinfo.v1.HeadInfo/GetHeadInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HeadInfoServer is the server API for HeadInfo service.
type HeadInfoServer interface {
	GetHeadInfo(context.Context, *HeadInfoRequest) (*HeadInfoResponse, error)
}

// UnimplementedHeadInfoServer can be embedded to have forward compatible implementations.
type UnimplementedHeadInfoServer struct {
}

func (*UnimplementedHeadInfoServer) GetHeadInfo(context.Context, *HeadInfoRequest) (*HeadInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHeadInfo not implemented")
}

func RegisterHeadInfoServer(s *grpc.Server, srv HeadInfoServer) {
	s.RegisterService(&_HeadInfo_serviceDesc, srv)
}

func _HeadInfo_GetHeadInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeadInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeadInfoServer).GetHeadInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dfuse.headinfo.v1.HeadInfo/GetHeadInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeadInfoServer).GetHeadInfo(ctx, req.(*HeadInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _HeadInfo_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dfuse.headinfo.v1.HeadInfo",
	HandlerType: (*HeadInfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHeadInfo",
			Handler:    _HeadInfo_GetHeadInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dfuse/headinfo/v1/headinfo.proto",
}

// StreamingHeadInfoClient is the client API for StreamingHeadInfo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StreamingHeadInfoClient interface {
	StreamHeadInfo(ctx context.Context, in *HeadInfoRequest, opts ...grpc.CallOption) (StreamingHeadInfo_StreamHeadInfoClient, error)
}

type streamingHeadInfoClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamingHeadInfoClient(cc grpc.ClientConnInterface) StreamingHeadInfoClient {
	return &streamingHeadInfoClient{cc}
}

func (c *streamingHeadInfoClient) StreamHeadInfo(ctx context.Context, in *HeadInfoRequest, opts ...grpc.CallOption) (StreamingHeadInfo_StreamHeadInfoClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StreamingHeadInfo_serviceDesc.Streams[0], "/dfuse.headinfo.v1.StreamingHeadInfo/StreamHeadInfo", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamingHeadInfoStreamHeadInfoClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StreamingHeadInfo_StreamHeadInfoClient interface {
	Recv() (*HeadInfoResponse, error)
	grpc.ClientStream
}

type streamingHeadInfoStreamHeadInfoClient struct {
	grpc.ClientStream
}

func (x *streamingHeadInfoStreamHeadInfoClient) Recv() (*HeadInfoResponse, error) {
	m := new(HeadInfoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamingHeadInfoServer is the server API for StreamingHeadInfo service.
type StreamingHeadInfoServer interface {
	StreamHeadInfo(*HeadInfoRequest, StreamingHeadInfo_StreamHeadInfoServer) error
}

// UnimplementedStreamingHeadInfoServer can be embedded to have forward compatible implementations.
type UnimplementedStreamingHeadInfoServer struct {
}

func (*UnimplementedStreamingHeadInfoServer) StreamHeadInfo(*HeadInfoRequest, StreamingHeadInfo_StreamHeadInfoServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamHeadInfo not implemented")
}

func RegisterStreamingHeadInfoServer(s *grpc.Server, srv StreamingHeadInfoServer) {
	s.RegisterService(&_StreamingHeadInfo_serviceDesc, srv)
}

func _StreamingHeadInfo_StreamHeadInfo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HeadInfoRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamingHeadInfoServer).StreamHeadInfo(m, &streamingHeadInfoStreamHeadInfoServer{stream})
}

type StreamingHeadInfo_StreamHeadInfoServer interface {
	Send(*HeadInfoResponse) error
	grpc.ServerStream
}

type streamingHeadInfoStreamHeadInfoServer struct {
	grpc.ServerStream
}

func (x *streamingHeadInfoStreamHeadInfoServer) Send(m *HeadInfoResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _StreamingHeadInfo_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dfuse.headinfo.v1.StreamingHeadInfo",
	HandlerType: (*StreamingHeadInfoServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamHeadInfo",
			Handler:       _StreamingHeadInfo_StreamHeadInfo_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "dfuse/headinfo/v1/headinfo.proto",
}
