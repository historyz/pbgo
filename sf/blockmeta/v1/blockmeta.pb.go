// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.1
// source: sf/blockmeta/v1/blockmeta.proto

package pbblockmeta

import (
	context "context"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ForkResolveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Block *BlockRef `protobuf:"bytes,1,opt,name=block,proto3" json:"block,omitempty"`
}

func (x *ForkResolveRequest) Reset() {
	*x = ForkResolveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_blockmeta_v1_blockmeta_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForkResolveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForkResolveRequest) ProtoMessage() {}

func (x *ForkResolveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sf_blockmeta_v1_blockmeta_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForkResolveRequest.ProtoReflect.Descriptor instead.
func (*ForkResolveRequest) Descriptor() ([]byte, []int) {
	return file_sf_blockmeta_v1_blockmeta_proto_rawDescGZIP(), []int{0}
}

func (x *ForkResolveRequest) GetBlock() *BlockRef {
	if x != nil {
		return x.Block
	}
	return nil
}

type ForkResolveResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ForkedBlockRefs []*BlockRef `protobuf:"bytes,1,rep,name=forkedBlockRefs,proto3" json:"forkedBlockRefs,omitempty"`
}

func (x *ForkResolveResponse) Reset() {
	*x = ForkResolveResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_blockmeta_v1_blockmeta_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForkResolveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForkResolveResponse) ProtoMessage() {}

func (x *ForkResolveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sf_blockmeta_v1_blockmeta_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForkResolveResponse.ProtoReflect.Descriptor instead.
func (*ForkResolveResponse) Descriptor() ([]byte, []int) {
	return file_sf_blockmeta_v1_blockmeta_proto_rawDescGZIP(), []int{1}
}

func (x *ForkResolveResponse) GetForkedBlockRefs() []*BlockRef {
	if x != nil {
		return x.ForkedBlockRefs
	}
	return nil
}

type BlockRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockNum uint64 `protobuf:"varint,1,opt,name=blockNum,proto3" json:"blockNum,omitempty"`
	BlockID  string `protobuf:"bytes,2,opt,name=blockID,proto3" json:"blockID,omitempty"`
}

func (x *BlockRef) Reset() {
	*x = BlockRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_blockmeta_v1_blockmeta_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockRef) ProtoMessage() {}

func (x *BlockRef) ProtoReflect() protoreflect.Message {
	mi := &file_sf_blockmeta_v1_blockmeta_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockRef.ProtoReflect.Descriptor instead.
func (*BlockRef) Descriptor() ([]byte, []int) {
	return file_sf_blockmeta_v1_blockmeta_proto_rawDescGZIP(), []int{2}
}

func (x *BlockRef) GetBlockNum() uint64 {
	if x != nil {
		return x.BlockNum
	}
	return 0
}

func (x *BlockRef) GetBlockID() string {
	if x != nil {
		return x.BlockID
	}
	return ""
}

type BlockRefs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockRefs []*BlockRef `protobuf:"bytes,1,rep,name=blockRefs,proto3" json:"blockRefs,omitempty"`
}

func (x *BlockRefs) Reset() {
	*x = BlockRefs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_blockmeta_v1_blockmeta_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockRefs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockRefs) ProtoMessage() {}

func (x *BlockRefs) ProtoReflect() protoreflect.Message {
	mi := &file_sf_blockmeta_v1_blockmeta_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockRefs.ProtoReflect.Descriptor instead.
func (*BlockRefs) Descriptor() ([]byte, []int) {
	return file_sf_blockmeta_v1_blockmeta_proto_rawDescGZIP(), []int{3}
}

func (x *BlockRefs) GetBlockRefs() []*BlockRef {
	if x != nil {
		return x.BlockRefs
	}
	return nil
}

type LIBRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LIBRequest) Reset() {
	*x = LIBRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_blockmeta_v1_blockmeta_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LIBRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LIBRequest) ProtoMessage() {}

func (x *LIBRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sf_blockmeta_v1_blockmeta_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LIBRequest.ProtoReflect.Descriptor instead.
func (*LIBRequest) Descriptor() ([]byte, []int) {
	return file_sf_blockmeta_v1_blockmeta_proto_rawDescGZIP(), []int{4}
}

type NumToIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockNum uint64 `protobuf:"varint,1,opt,name=blockNum,proto3" json:"blockNum,omitempty"`
}

func (x *NumToIDRequest) Reset() {
	*x = NumToIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_blockmeta_v1_blockmeta_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NumToIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NumToIDRequest) ProtoMessage() {}

func (x *NumToIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sf_blockmeta_v1_blockmeta_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NumToIDRequest.ProtoReflect.Descriptor instead.
func (*NumToIDRequest) Descriptor() ([]byte, []int) {
	return file_sf_blockmeta_v1_blockmeta_proto_rawDescGZIP(), []int{5}
}

func (x *NumToIDRequest) GetBlockNum() uint64 {
	if x != nil {
		return x.BlockNum
	}
	return 0
}

type TimeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time *timestamp.Timestamp `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *TimeRequest) Reset() {
	*x = TimeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_blockmeta_v1_blockmeta_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeRequest) ProtoMessage() {}

func (x *TimeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sf_blockmeta_v1_blockmeta_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeRequest.ProtoReflect.Descriptor instead.
func (*TimeRequest) Descriptor() ([]byte, []int) {
	return file_sf_blockmeta_v1_blockmeta_proto_rawDescGZIP(), []int{6}
}

func (x *TimeRequest) GetTime() *timestamp.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type RelativeTimeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time      *timestamp.Timestamp `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	Inclusive bool                 `protobuf:"varint,2,opt,name=inclusive,proto3" json:"inclusive,omitempty"`
}

func (x *RelativeTimeRequest) Reset() {
	*x = RelativeTimeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_blockmeta_v1_blockmeta_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelativeTimeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelativeTimeRequest) ProtoMessage() {}

func (x *RelativeTimeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sf_blockmeta_v1_blockmeta_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelativeTimeRequest.ProtoReflect.Descriptor instead.
func (*RelativeTimeRequest) Descriptor() ([]byte, []int) {
	return file_sf_blockmeta_v1_blockmeta_proto_rawDescGZIP(), []int{7}
}

func (x *RelativeTimeRequest) GetTime() *timestamp.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *RelativeTimeRequest) GetInclusive() bool {
	if x != nil {
		return x.Inclusive
	}
	return false
}

// Block ID that matched the request
type BlockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                      // Block ID that matched
	Time         *timestamp.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`                  // Precise block time as a Timestamp
	Irreversible bool                 `protobuf:"varint,3,opt,name=irreversible,proto3" json:"irreversible,omitempty"` // Whether it's known to be irreversible or not
}

func (x *BlockResponse) Reset() {
	*x = BlockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_blockmeta_v1_blockmeta_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockResponse) ProtoMessage() {}

func (x *BlockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sf_blockmeta_v1_blockmeta_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockResponse.ProtoReflect.Descriptor instead.
func (*BlockResponse) Descriptor() ([]byte, []int) {
	return file_sf_blockmeta_v1_blockmeta_proto_rawDescGZIP(), []int{8}
}

func (x *BlockResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BlockResponse) GetTime() *timestamp.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *BlockResponse) GetIrreversible() bool {
	if x != nil {
		return x.Irreversible
	}
	return false
}

type BlockIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	BlockTimeMilli int64  `protobuf:"varint,2,opt,name=blockTimeMilli,proto3" json:"blockTimeMilli,omitempty"`
	Irreversible   bool   `protobuf:"varint,3,opt,name=irreversible,proto3" json:"irreversible,omitempty"`
}

func (x *BlockIDResponse) Reset() {
	*x = BlockIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_blockmeta_v1_blockmeta_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockIDResponse) ProtoMessage() {}

func (x *BlockIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sf_blockmeta_v1_blockmeta_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockIDResponse.ProtoReflect.Descriptor instead.
func (*BlockIDResponse) Descriptor() ([]byte, []int) {
	return file_sf_blockmeta_v1_blockmeta_proto_rawDescGZIP(), []int{9}
}

func (x *BlockIDResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BlockIDResponse) GetBlockTimeMilli() int64 {
	if x != nil {
		return x.BlockTimeMilli
	}
	return 0
}

func (x *BlockIDResponse) GetIrreversible() bool {
	if x != nil {
		return x.Irreversible
	}
	return false
}

type InLongestChainRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockID string `protobuf:"bytes,1,opt,name=blockID,proto3" json:"blockID,omitempty"`
}

func (x *InLongestChainRequest) Reset() {
	*x = InLongestChainRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_blockmeta_v1_blockmeta_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InLongestChainRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InLongestChainRequest) ProtoMessage() {}

func (x *InLongestChainRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sf_blockmeta_v1_blockmeta_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InLongestChainRequest.ProtoReflect.Descriptor instead.
func (*InLongestChainRequest) Descriptor() ([]byte, []int) {
	return file_sf_blockmeta_v1_blockmeta_proto_rawDescGZIP(), []int{10}
}

func (x *InLongestChainRequest) GetBlockID() string {
	if x != nil {
		return x.BlockID
	}
	return ""
}

type InLongestChainResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InLongestChain bool `protobuf:"varint,1,opt,name=inLongestChain,proto3" json:"inLongestChain,omitempty"`
	Irreversible   bool `protobuf:"varint,2,opt,name=irreversible,proto3" json:"irreversible,omitempty"`
}

func (x *InLongestChainResponse) Reset() {
	*x = InLongestChainResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_blockmeta_v1_blockmeta_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InLongestChainResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InLongestChainResponse) ProtoMessage() {}

func (x *InLongestChainResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sf_blockmeta_v1_blockmeta_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InLongestChainResponse.ProtoReflect.Descriptor instead.
func (*InLongestChainResponse) Descriptor() ([]byte, []int) {
	return file_sf_blockmeta_v1_blockmeta_proto_rawDescGZIP(), []int{11}
}

func (x *InLongestChainResponse) GetInLongestChain() bool {
	if x != nil {
		return x.InLongestChain
	}
	return false
}

func (x *InLongestChainResponse) GetIrreversible() bool {
	if x != nil {
		return x.Irreversible
	}
	return false
}

type GetBlockInLongestChainRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockNum uint64 `protobuf:"varint,1,opt,name=block_num,json=blockNum,proto3" json:"block_num,omitempty"`
}

func (x *GetBlockInLongestChainRequest) Reset() {
	*x = GetBlockInLongestChainRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_blockmeta_v1_blockmeta_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlockInLongestChainRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockInLongestChainRequest) ProtoMessage() {}

func (x *GetBlockInLongestChainRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sf_blockmeta_v1_blockmeta_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockInLongestChainRequest.ProtoReflect.Descriptor instead.
func (*GetBlockInLongestChainRequest) Descriptor() ([]byte, []int) {
	return file_sf_blockmeta_v1_blockmeta_proto_rawDescGZIP(), []int{12}
}

func (x *GetBlockInLongestChainRequest) GetBlockNum() uint64 {
	if x != nil {
		return x.BlockNum
	}
	return 0
}

type GetBlockInLongestChainResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockId      string `protobuf:"bytes,1,opt,name=block_id,json=blockId,proto3" json:"block_id,omitempty"`
	BlockNum     uint64 `protobuf:"varint,2,opt,name=block_num,json=blockNum,proto3" json:"block_num,omitempty"`
	Irreversible bool   `protobuf:"varint,3,opt,name=irreversible,proto3" json:"irreversible,omitempty"`
}

func (x *GetBlockInLongestChainResponse) Reset() {
	*x = GetBlockInLongestChainResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_blockmeta_v1_blockmeta_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlockInLongestChainResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockInLongestChainResponse) ProtoMessage() {}

func (x *GetBlockInLongestChainResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sf_blockmeta_v1_blockmeta_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockInLongestChainResponse.ProtoReflect.Descriptor instead.
func (*GetBlockInLongestChainResponse) Descriptor() ([]byte, []int) {
	return file_sf_blockmeta_v1_blockmeta_proto_rawDescGZIP(), []int{13}
}

func (x *GetBlockInLongestChainResponse) GetBlockId() string {
	if x != nil {
		return x.BlockId
	}
	return ""
}

func (x *GetBlockInLongestChainResponse) GetBlockNum() uint64 {
	if x != nil {
		return x.BlockNum
	}
	return 0
}

func (x *GetBlockInLongestChainResponse) GetIrreversible() bool {
	if x != nil {
		return x.Irreversible
	}
	return false
}

var File_sf_blockmeta_v1_blockmeta_proto protoreflect.FileDescriptor

var file_sf_blockmeta_v1_blockmeta_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x73, 0x66, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x6d, 0x65, 0x74, 0x61, 0x2f, 0x76,
	0x31, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0f, 0x73, 0x66, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x6d, 0x65, 0x74, 0x61, 0x2e,
	0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x45, 0x0a, 0x12, 0x46, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x05, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x66, 0x2e, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x52, 0x65, 0x66, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x5a, 0x0a, 0x13, 0x46, 0x6f,
	0x72, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x43, 0x0a, 0x0f, 0x66, 0x6f, 0x72, 0x6b, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x52, 0x65, 0x66, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x66, 0x2e,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x52, 0x65, 0x66, 0x52, 0x0f, 0x66, 0x6f, 0x72, 0x6b, 0x65, 0x64, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x52, 0x65, 0x66, 0x73, 0x22, 0x40, 0x0a, 0x08, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52,
	0x65, 0x66, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x12, 0x18,
	0x0a, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x22, 0x44, 0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x52, 0x65, 0x66, 0x73, 0x12, 0x37, 0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65,
	0x66, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x66, 0x2e, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x52, 0x65, 0x66, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x66, 0x73, 0x22, 0x0c,
	0x0a, 0x0a, 0x4c, 0x49, 0x42, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x2c, 0x0a, 0x0e,
	0x4e, 0x75, 0x6d, 0x54, 0x6f, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x22, 0x3d, 0x0a, 0x0b, 0x54, 0x69,
	0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x63, 0x0a, 0x13, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x22, 0x73,
	0x0a, 0x0d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x69, 0x72, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x72, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x62, 0x6c, 0x65, 0x22, 0x6d, 0x0a, 0x0f, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x54,
	0x69, 0x6d, 0x65, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x12, 0x22,
	0x0a, 0x0c, 0x69, 0x72, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x72, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x69, 0x62,
	0x6c, 0x65, 0x22, 0x31, 0x0a, 0x15, 0x49, 0x6e, 0x4c, 0x6f, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x49, 0x44, 0x22, 0x64, 0x0a, 0x16, 0x49, 0x6e, 0x4c, 0x6f, 0x6e, 0x67, 0x65,
	0x73, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x4c, 0x6f, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x6e, 0x4c, 0x6f, 0x6e, 0x67, 0x65,
	0x73, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x72, 0x72, 0x65, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69,
	0x72, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x22, 0x3c, 0x0a, 0x1d, 0x47,
	0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x4c, 0x6f, 0x6e, 0x67, 0x65, 0x73, 0x74,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x22, 0x7c, 0x0a, 0x1e, 0x47, 0x65, 0x74,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x4c, 0x6f, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x4e, 0x75, 0x6d, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x72, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x72, 0x72, 0x65, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x32, 0xed, 0x01, 0x0a, 0x08, 0x54, 0x69, 0x6d, 0x65,
	0x54, 0x6f, 0x49, 0x44, 0x12, 0x42, 0x0a, 0x02, 0x41, 0x74, 0x12, 0x1c, 0x2e, 0x73, 0x66, 0x2e,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x73, 0x66, 0x2e, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x05, 0x41, 0x66, 0x74, 0x65,
	0x72, 0x12, 0x24, 0x2e, 0x73, 0x66, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x6d, 0x65, 0x74, 0x61,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x73, 0x66, 0x2e, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x06, 0x42, 0x65, 0x66, 0x6f, 0x72,
	0x65, 0x12, 0x24, 0x2e, 0x73, 0x66, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x6d, 0x65, 0x74, 0x61,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x73, 0x66, 0x2e, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x9f, 0x01, 0x0a, 0x07, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x49, 0x44, 0x12, 0x4c, 0x0a, 0x07, 0x4e, 0x75, 0x6d, 0x54, 0x6f, 0x49, 0x44, 0x12, 0x1f,
	0x2e, 0x73, 0x66, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31,
	0x2e, 0x4e, 0x75, 0x6d, 0x54, 0x6f, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x20, 0x2e, 0x73, 0x66, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x46, 0x0a, 0x05, 0x4c, 0x49, 0x42, 0x49, 0x44, 0x12, 0x1b, 0x2e, 0x73, 0x66, 0x2e,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x49, 0x42,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x73, 0x66, 0x2e, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49,
	0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x5d, 0x0a, 0x05, 0x46, 0x6f, 0x72,
	0x6b, 0x73, 0x12, 0x54, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x12, 0x23, 0x2e,
	0x73, 0x66, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x24, 0x2e, 0x73, 0x66, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x6d, 0x65, 0x74,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xf2, 0x01, 0x0a, 0x12, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x44, 0x69, 0x73, 0x63, 0x72, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x61, 0x0a, 0x0e, 0x49, 0x6e, 0x4c, 0x6f, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x12, 0x26, 0x2e, 0x73, 0x66, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x6d, 0x65, 0x74, 0x61,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x4c, 0x6f, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x4c, 0x6f,
	0x6e, 0x67, 0x65, 0x73, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x79, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e,
	0x4c, 0x6f, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x2e, 0x2e, 0x73,
	0x66, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x4c, 0x6f, 0x6e, 0x67, 0x65, 0x73, 0x74,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x73,
	0x66, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x4c, 0x6f, 0x6e, 0x67, 0x65, 0x73, 0x74,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x3b, 0x5a,
	0x39, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x69, 0x6e, 0x67, 0x66, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x62, 0x67, 0x6f, 0x2f, 0x73,
	0x66, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x6d, 0x65, 0x74, 0x61, 0x2f, 0x76, 0x31, 0x3b, 0x70,
	0x62, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x6d, 0x65, 0x74, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_sf_blockmeta_v1_blockmeta_proto_rawDescOnce sync.Once
	file_sf_blockmeta_v1_blockmeta_proto_rawDescData = file_sf_blockmeta_v1_blockmeta_proto_rawDesc
)

func file_sf_blockmeta_v1_blockmeta_proto_rawDescGZIP() []byte {
	file_sf_blockmeta_v1_blockmeta_proto_rawDescOnce.Do(func() {
		file_sf_blockmeta_v1_blockmeta_proto_rawDescData = protoimpl.X.CompressGZIP(file_sf_blockmeta_v1_blockmeta_proto_rawDescData)
	})
	return file_sf_blockmeta_v1_blockmeta_proto_rawDescData
}

var file_sf_blockmeta_v1_blockmeta_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_sf_blockmeta_v1_blockmeta_proto_goTypes = []interface{}{
	(*ForkResolveRequest)(nil),             // 0: sf.blockmeta.v1.ForkResolveRequest
	(*ForkResolveResponse)(nil),            // 1: sf.blockmeta.v1.ForkResolveResponse
	(*BlockRef)(nil),                       // 2: sf.blockmeta.v1.BlockRef
	(*BlockRefs)(nil),                      // 3: sf.blockmeta.v1.BlockRefs
	(*LIBRequest)(nil),                     // 4: sf.blockmeta.v1.LIBRequest
	(*NumToIDRequest)(nil),                 // 5: sf.blockmeta.v1.NumToIDRequest
	(*TimeRequest)(nil),                    // 6: sf.blockmeta.v1.TimeRequest
	(*RelativeTimeRequest)(nil),            // 7: sf.blockmeta.v1.RelativeTimeRequest
	(*BlockResponse)(nil),                  // 8: sf.blockmeta.v1.BlockResponse
	(*BlockIDResponse)(nil),                // 9: sf.blockmeta.v1.BlockIDResponse
	(*InLongestChainRequest)(nil),          // 10: sf.blockmeta.v1.InLongestChainRequest
	(*InLongestChainResponse)(nil),         // 11: sf.blockmeta.v1.InLongestChainResponse
	(*GetBlockInLongestChainRequest)(nil),  // 12: sf.blockmeta.v1.GetBlockInLongestChainRequest
	(*GetBlockInLongestChainResponse)(nil), // 13: sf.blockmeta.v1.GetBlockInLongestChainResponse
	(*timestamp.Timestamp)(nil),            // 14: google.protobuf.Timestamp
}
var file_sf_blockmeta_v1_blockmeta_proto_depIdxs = []int32{
	2,  // 0: sf.blockmeta.v1.ForkResolveRequest.block:type_name -> sf.blockmeta.v1.BlockRef
	2,  // 1: sf.blockmeta.v1.ForkResolveResponse.forkedBlockRefs:type_name -> sf.blockmeta.v1.BlockRef
	2,  // 2: sf.blockmeta.v1.BlockRefs.blockRefs:type_name -> sf.blockmeta.v1.BlockRef
	14, // 3: sf.blockmeta.v1.TimeRequest.time:type_name -> google.protobuf.Timestamp
	14, // 4: sf.blockmeta.v1.RelativeTimeRequest.time:type_name -> google.protobuf.Timestamp
	14, // 5: sf.blockmeta.v1.BlockResponse.time:type_name -> google.protobuf.Timestamp
	6,  // 6: sf.blockmeta.v1.TimeToID.At:input_type -> sf.blockmeta.v1.TimeRequest
	7,  // 7: sf.blockmeta.v1.TimeToID.After:input_type -> sf.blockmeta.v1.RelativeTimeRequest
	7,  // 8: sf.blockmeta.v1.TimeToID.Before:input_type -> sf.blockmeta.v1.RelativeTimeRequest
	5,  // 9: sf.blockmeta.v1.BlockID.NumToID:input_type -> sf.blockmeta.v1.NumToIDRequest
	4,  // 10: sf.blockmeta.v1.BlockID.LIBID:input_type -> sf.blockmeta.v1.LIBRequest
	0,  // 11: sf.blockmeta.v1.Forks.Resolve:input_type -> sf.blockmeta.v1.ForkResolveRequest
	10, // 12: sf.blockmeta.v1.ChainDiscriminator.InLongestChain:input_type -> sf.blockmeta.v1.InLongestChainRequest
	12, // 13: sf.blockmeta.v1.ChainDiscriminator.GetBlockInLongestChain:input_type -> sf.blockmeta.v1.GetBlockInLongestChainRequest
	8,  // 14: sf.blockmeta.v1.TimeToID.At:output_type -> sf.blockmeta.v1.BlockResponse
	8,  // 15: sf.blockmeta.v1.TimeToID.After:output_type -> sf.blockmeta.v1.BlockResponse
	8,  // 16: sf.blockmeta.v1.TimeToID.Before:output_type -> sf.blockmeta.v1.BlockResponse
	9,  // 17: sf.blockmeta.v1.BlockID.NumToID:output_type -> sf.blockmeta.v1.BlockIDResponse
	9,  // 18: sf.blockmeta.v1.BlockID.LIBID:output_type -> sf.blockmeta.v1.BlockIDResponse
	1,  // 19: sf.blockmeta.v1.Forks.Resolve:output_type -> sf.blockmeta.v1.ForkResolveResponse
	11, // 20: sf.blockmeta.v1.ChainDiscriminator.InLongestChain:output_type -> sf.blockmeta.v1.InLongestChainResponse
	13, // 21: sf.blockmeta.v1.ChainDiscriminator.GetBlockInLongestChain:output_type -> sf.blockmeta.v1.GetBlockInLongestChainResponse
	14, // [14:22] is the sub-list for method output_type
	6,  // [6:14] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_sf_blockmeta_v1_blockmeta_proto_init() }
func file_sf_blockmeta_v1_blockmeta_proto_init() {
	if File_sf_blockmeta_v1_blockmeta_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sf_blockmeta_v1_blockmeta_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForkResolveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_blockmeta_v1_blockmeta_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForkResolveResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_blockmeta_v1_blockmeta_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_blockmeta_v1_blockmeta_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockRefs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_blockmeta_v1_blockmeta_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LIBRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_blockmeta_v1_blockmeta_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NumToIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_blockmeta_v1_blockmeta_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_blockmeta_v1_blockmeta_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelativeTimeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_blockmeta_v1_blockmeta_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_blockmeta_v1_blockmeta_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_blockmeta_v1_blockmeta_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InLongestChainRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_blockmeta_v1_blockmeta_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InLongestChainResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_blockmeta_v1_blockmeta_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlockInLongestChainRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_blockmeta_v1_blockmeta_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlockInLongestChainResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sf_blockmeta_v1_blockmeta_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   4,
		},
		GoTypes:           file_sf_blockmeta_v1_blockmeta_proto_goTypes,
		DependencyIndexes: file_sf_blockmeta_v1_blockmeta_proto_depIdxs,
		MessageInfos:      file_sf_blockmeta_v1_blockmeta_proto_msgTypes,
	}.Build()
	File_sf_blockmeta_v1_blockmeta_proto = out.File
	file_sf_blockmeta_v1_blockmeta_proto_rawDesc = nil
	file_sf_blockmeta_v1_blockmeta_proto_goTypes = nil
	file_sf_blockmeta_v1_blockmeta_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TimeToIDClient is the client API for TimeToID service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TimeToIDClient interface {
	At(ctx context.Context, in *TimeRequest, opts ...grpc.CallOption) (*BlockResponse, error)
	After(ctx context.Context, in *RelativeTimeRequest, opts ...grpc.CallOption) (*BlockResponse, error)
	Before(ctx context.Context, in *RelativeTimeRequest, opts ...grpc.CallOption) (*BlockResponse, error)
}

type timeToIDClient struct {
	cc grpc.ClientConnInterface
}

func NewTimeToIDClient(cc grpc.ClientConnInterface) TimeToIDClient {
	return &timeToIDClient{cc}
}

func (c *timeToIDClient) At(ctx context.Context, in *TimeRequest, opts ...grpc.CallOption) (*BlockResponse, error) {
	out := new(BlockResponse)
	err := c.cc.Invoke(ctx, "/sf.blockmeta.v1.TimeToID/At", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timeToIDClient) After(ctx context.Context, in *RelativeTimeRequest, opts ...grpc.CallOption) (*BlockResponse, error) {
	out := new(BlockResponse)
	err := c.cc.Invoke(ctx, "/sf.blockmeta.v1.TimeToID/After", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timeToIDClient) Before(ctx context.Context, in *RelativeTimeRequest, opts ...grpc.CallOption) (*BlockResponse, error) {
	out := new(BlockResponse)
	err := c.cc.Invoke(ctx, "/sf.blockmeta.v1.TimeToID/Before", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TimeToIDServer is the server API for TimeToID service.
type TimeToIDServer interface {
	At(context.Context, *TimeRequest) (*BlockResponse, error)
	After(context.Context, *RelativeTimeRequest) (*BlockResponse, error)
	Before(context.Context, *RelativeTimeRequest) (*BlockResponse, error)
}

// UnimplementedTimeToIDServer can be embedded to have forward compatible implementations.
type UnimplementedTimeToIDServer struct {
}

func (*UnimplementedTimeToIDServer) At(context.Context, *TimeRequest) (*BlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method At not implemented")
}
func (*UnimplementedTimeToIDServer) After(context.Context, *RelativeTimeRequest) (*BlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method After not implemented")
}
func (*UnimplementedTimeToIDServer) Before(context.Context, *RelativeTimeRequest) (*BlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Before not implemented")
}

func RegisterTimeToIDServer(s *grpc.Server, srv TimeToIDServer) {
	s.RegisterService(&_TimeToID_serviceDesc, srv)
}

func _TimeToID_At_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimeToIDServer).At(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sf.blockmeta.v1.TimeToID/At",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimeToIDServer).At(ctx, req.(*TimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TimeToID_After_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelativeTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimeToIDServer).After(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sf.blockmeta.v1.TimeToID/After",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimeToIDServer).After(ctx, req.(*RelativeTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TimeToID_Before_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelativeTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimeToIDServer).Before(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sf.blockmeta.v1.TimeToID/Before",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimeToIDServer).Before(ctx, req.(*RelativeTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TimeToID_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sf.blockmeta.v1.TimeToID",
	HandlerType: (*TimeToIDServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "At",
			Handler:    _TimeToID_At_Handler,
		},
		{
			MethodName: "After",
			Handler:    _TimeToID_After_Handler,
		},
		{
			MethodName: "Before",
			Handler:    _TimeToID_Before_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sf/blockmeta/v1/blockmeta.proto",
}

// BlockIDClient is the client API for BlockID service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BlockIDClient interface {
	//
	NumToID(ctx context.Context, in *NumToIDRequest, opts ...grpc.CallOption) (*BlockIDResponse, error)
	// Query the CURRENT irreversible block
	LIBID(ctx context.Context, in *LIBRequest, opts ...grpc.CallOption) (*BlockIDResponse, error)
}

type blockIDClient struct {
	cc grpc.ClientConnInterface
}

func NewBlockIDClient(cc grpc.ClientConnInterface) BlockIDClient {
	return &blockIDClient{cc}
}

func (c *blockIDClient) NumToID(ctx context.Context, in *NumToIDRequest, opts ...grpc.CallOption) (*BlockIDResponse, error) {
	out := new(BlockIDResponse)
	err := c.cc.Invoke(ctx, "/sf.blockmeta.v1.BlockID/NumToID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockIDClient) LIBID(ctx context.Context, in *LIBRequest, opts ...grpc.CallOption) (*BlockIDResponse, error) {
	out := new(BlockIDResponse)
	err := c.cc.Invoke(ctx, "/sf.blockmeta.v1.BlockID/LIBID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlockIDServer is the server API for BlockID service.
type BlockIDServer interface {
	//
	NumToID(context.Context, *NumToIDRequest) (*BlockIDResponse, error)
	// Query the CURRENT irreversible block
	LIBID(context.Context, *LIBRequest) (*BlockIDResponse, error)
}

// UnimplementedBlockIDServer can be embedded to have forward compatible implementations.
type UnimplementedBlockIDServer struct {
}

func (*UnimplementedBlockIDServer) NumToID(context.Context, *NumToIDRequest) (*BlockIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NumToID not implemented")
}
func (*UnimplementedBlockIDServer) LIBID(context.Context, *LIBRequest) (*BlockIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LIBID not implemented")
}

func RegisterBlockIDServer(s *grpc.Server, srv BlockIDServer) {
	s.RegisterService(&_BlockID_serviceDesc, srv)
}

func _BlockID_NumToID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NumToIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockIDServer).NumToID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sf.blockmeta.v1.BlockID/NumToID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockIDServer).NumToID(ctx, req.(*NumToIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockID_LIBID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LIBRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockIDServer).LIBID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sf.blockmeta.v1.BlockID/LIBID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockIDServer).LIBID(ctx, req.(*LIBRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BlockID_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sf.blockmeta.v1.BlockID",
	HandlerType: (*BlockIDServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NumToID",
			Handler:    _BlockID_NumToID_Handler,
		},
		{
			MethodName: "LIBID",
			Handler:    _BlockID_LIBID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sf/blockmeta/v1/blockmeta.proto",
}

// ForksClient is the client API for Forks service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ForksClient interface {
	Resolve(ctx context.Context, in *ForkResolveRequest, opts ...grpc.CallOption) (*ForkResolveResponse, error)
}

type forksClient struct {
	cc grpc.ClientConnInterface
}

func NewForksClient(cc grpc.ClientConnInterface) ForksClient {
	return &forksClient{cc}
}

func (c *forksClient) Resolve(ctx context.Context, in *ForkResolveRequest, opts ...grpc.CallOption) (*ForkResolveResponse, error) {
	out := new(ForkResolveResponse)
	err := c.cc.Invoke(ctx, "/sf.blockmeta.v1.Forks/Resolve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ForksServer is the server API for Forks service.
type ForksServer interface {
	Resolve(context.Context, *ForkResolveRequest) (*ForkResolveResponse, error)
}

// UnimplementedForksServer can be embedded to have forward compatible implementations.
type UnimplementedForksServer struct {
}

func (*UnimplementedForksServer) Resolve(context.Context, *ForkResolveRequest) (*ForkResolveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Resolve not implemented")
}

func RegisterForksServer(s *grpc.Server, srv ForksServer) {
	s.RegisterService(&_Forks_serviceDesc, srv)
}

func _Forks_Resolve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForkResolveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForksServer).Resolve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sf.blockmeta.v1.Forks/Resolve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForksServer).Resolve(ctx, req.(*ForkResolveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Forks_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sf.blockmeta.v1.Forks",
	HandlerType: (*ForksServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Resolve",
			Handler:    _Forks_Resolve_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sf/blockmeta/v1/blockmeta.proto",
}

// ChainDiscriminatorClient is the client API for ChainDiscriminator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChainDiscriminatorClient interface {
	InLongestChain(ctx context.Context, in *InLongestChainRequest, opts ...grpc.CallOption) (*InLongestChainResponse, error)
	GetBlockInLongestChain(ctx context.Context, in *GetBlockInLongestChainRequest, opts ...grpc.CallOption) (*GetBlockInLongestChainResponse, error)
}

type chainDiscriminatorClient struct {
	cc grpc.ClientConnInterface
}

func NewChainDiscriminatorClient(cc grpc.ClientConnInterface) ChainDiscriminatorClient {
	return &chainDiscriminatorClient{cc}
}

func (c *chainDiscriminatorClient) InLongestChain(ctx context.Context, in *InLongestChainRequest, opts ...grpc.CallOption) (*InLongestChainResponse, error) {
	out := new(InLongestChainResponse)
	err := c.cc.Invoke(ctx, "/sf.blockmeta.v1.ChainDiscriminator/InLongestChain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chainDiscriminatorClient) GetBlockInLongestChain(ctx context.Context, in *GetBlockInLongestChainRequest, opts ...grpc.CallOption) (*GetBlockInLongestChainResponse, error) {
	out := new(GetBlockInLongestChainResponse)
	err := c.cc.Invoke(ctx, "/sf.blockmeta.v1.ChainDiscriminator/GetBlockInLongestChain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChainDiscriminatorServer is the server API for ChainDiscriminator service.
type ChainDiscriminatorServer interface {
	InLongestChain(context.Context, *InLongestChainRequest) (*InLongestChainResponse, error)
	GetBlockInLongestChain(context.Context, *GetBlockInLongestChainRequest) (*GetBlockInLongestChainResponse, error)
}

// UnimplementedChainDiscriminatorServer can be embedded to have forward compatible implementations.
type UnimplementedChainDiscriminatorServer struct {
}

func (*UnimplementedChainDiscriminatorServer) InLongestChain(context.Context, *InLongestChainRequest) (*InLongestChainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InLongestChain not implemented")
}
func (*UnimplementedChainDiscriminatorServer) GetBlockInLongestChain(context.Context, *GetBlockInLongestChainRequest) (*GetBlockInLongestChainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockInLongestChain not implemented")
}

func RegisterChainDiscriminatorServer(s *grpc.Server, srv ChainDiscriminatorServer) {
	s.RegisterService(&_ChainDiscriminator_serviceDesc, srv)
}

func _ChainDiscriminator_InLongestChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InLongestChainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainDiscriminatorServer).InLongestChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sf.blockmeta.v1.ChainDiscriminator/InLongestChain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainDiscriminatorServer).InLongestChain(ctx, req.(*InLongestChainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChainDiscriminator_GetBlockInLongestChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockInLongestChainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainDiscriminatorServer).GetBlockInLongestChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sf.blockmeta.v1.ChainDiscriminator/GetBlockInLongestChain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainDiscriminatorServer).GetBlockInLongestChain(ctx, req.(*GetBlockInLongestChainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ChainDiscriminator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sf.blockmeta.v1.ChainDiscriminator",
	HandlerType: (*ChainDiscriminatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InLongestChain",
			Handler:    _ChainDiscriminator_InLongestChain_Handler,
		},
		{
			MethodName: "GetBlockInLongestChain",
			Handler:    _ChainDiscriminator_GetBlockInLongestChain_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sf/blockmeta/v1/blockmeta.proto",
}
